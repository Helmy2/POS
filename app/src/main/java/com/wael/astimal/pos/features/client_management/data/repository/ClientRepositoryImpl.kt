package com.wael.astimal.pos.features.client_management.data.repository

import com.wael.astimal.pos.features.client_management.data.entity.ClientEntity
import com.wael.astimal.pos.features.client_management.data.entity.toDomain
import com.wael.astimal.pos.features.client_management.data.local.ClientDao
import com.wael.astimal.pos.features.client_management.domain.entity.Client
import com.wael.astimal.pos.features.client_management.domain.repository.ClientRepository
import com.wael.astimal.pos.features.user.data.entity.UserEntity
import com.wael.astimal.pos.features.user.data.local.UserDao
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map

class ClientRepositoryImpl(private val clientDao: ClientDao, private val userDao: UserDao) :
    ClientRepository {

//    init {
//        CoroutineScope(Dispatchers.IO).launch {
//            DummyDataSeeder(
//                userDao = userDao,
//                clientDao = clientDao
//            ).populateDummyUsersAndClients()
//        }
//    }

    override fun searchClients(query: String): Flow<List<Client>> {
        return clientDao.searchClientsWithDetailsFlow(query).map { list ->
            list.map { it.toDomain() }
        }
    }
}

class DummyDataSeeder(
    private val userDao: UserDao,
    private val clientDao: ClientDao,
) {

    suspend fun populateDummyUsersAndClients() {
        println("Populating dummy users and clients...")

        // --- Create Dummy Employees (Users flagged as employees) ---
        val emp1 = UserEntity(
            // localId will be auto-generated by Room
            serverId = -1001, // Use negative/distinct serverIds for dummy data
            name = "Default Employee One",
            arName = "موظف افتراضي ١",
            enName = "Default Employee One",
            email = "employee1@example.com",
            phone = "555000111",
            isClientFlag = false,
            isEmployeeFlag = true,
            isSynced = true, // Mark as synced if they represent existing server data
            lastModified = System.currentTimeMillis()
        )
        val emp1LocalId = userDao.insertUser(emp1)

        val emp2 = UserEntity(
            serverId = -1002,
            name = "Employee Two",
            arName = "موظف ٢",
            enName = "Employee Two",
            email = "employee2@example.com",
            phone = "555000222",
            isClientFlag = false,
            isEmployeeFlag = true,
            isSynced = true,
            lastModified = System.currentTimeMillis()
        )
        val emp2LocalId = userDao.insertUser(emp2)

        // --- Create Dummy Users who will become Clients ---
        val userForClient1 = UserEntity(
            serverId = -101,
            name = "Ahmed Mohamed",
            arName = "أحمد محمد",
            enName = "Ahmed Mohamed",
            email = "ahmed.client@example.com",
            phone = "1112223330", // This can be the primary phone
            isClientFlag = true, // This user is intended to be a client
            isEmployeeFlag = false,
            isSynced = true,
            lastModified = System.currentTimeMillis()
        )
        val userClient1LocalId = userDao.insertUser(userForClient1)

        val userForClient2 = UserEntity(
            serverId = -102,
            name = "Fatima Ali",
            arName = "فاطمة علي",
            enName = "Fatima Ali",
            email = "fatima.client@example.com",
            phone = "7778889990",
            isClientFlag = true,
            isEmployeeFlag = false,
            isSynced = true,
            lastModified = System.currentTimeMillis()
        )
        val userClient2LocalId = userDao.insertUser(userForClient2)

        val userForClient3 = UserEntity(
            serverId = -103,
            name = "Walk-in Customer",
            arName = "عميل نقدي",
            enName = "Walk-in Customer",
            email = "walkin@example.com",
            phone = "0000000000",
            isClientFlag = true,
            isEmployeeFlag = false,
            isSynced = true,
            lastModified = System.currentTimeMillis()
        )
        val userClient3LocalId = userDao.insertUser(userForClient3)


        // --- Create ClientEntity records linking to the UserEntities ---
        val client1Entity = ClientEntity(
            // localId will be auto-generated
            serverId = -201, // Dummy serverId for Client record
            userLocalId = userClient1LocalId,
            responsibleEmployeeLocalId = emp1LocalId,
            address = "123 Nile St, Cairo",
            debt = 250.50,
            isSupplier = false,
            isSynced = true,
            lastModified = System.currentTimeMillis(),
            phone1 = "1112223330", // Updated to use direct fields
            phone2 = "1112223331",
            phone3 = null
        )
        clientDao.insertOrUpdateClient(client1Entity) // No longer need to capture returned ID for phones

        val client2Entity = ClientEntity(
            serverId = -202,
            userLocalId = userClient2LocalId,
            responsibleEmployeeLocalId = emp2LocalId,
            address = "456 Cornish Rd, Alexandria",
            debt = 0.0,
            isSupplier = true, // This client can also be a supplier
            isSynced = true,
            lastModified = System.currentTimeMillis(),
            phone1 = "7778889990", // Updated to use direct fields
            phone2 = null,
            phone3 = null
        )
        clientDao.insertOrUpdateClient(client2Entity)

        val client3Entity = ClientEntity( // Walk-in customer
            serverId = -203,
            userLocalId = userClient3LocalId,
            responsibleEmployeeLocalId = emp1LocalId, // Or null if not applicable
            address = "N/A",
            debt = 0.0,
            isSupplier = false,
            isSynced = true,
            lastModified = System.currentTimeMillis(),
            phone1 = "0000000000", // Updated to use direct fields
            phone2 = null,
            phone3 = null
        )
        clientDao.insertOrUpdateClient(client3Entity)

        println("Dummy data population complete.")
    }
}